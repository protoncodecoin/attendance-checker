 FutureBuilder(
        future: mockService.getExploreData(),
        builder: (context, AsyncSnapshot<ExploreData> snapshot) {
          if (snapshot.connectionState == ConnectionState.done) {
            final lectures = snapshot.data?.lectures
                    ?.where((lecture) => lecture.hasClassEnded == false)
                    .toList() ??
                [];

            return Padding(
              padding: const EdgeInsets.all(8.0),
              child: ListView.builder(
                itemCount: lectures.length,
                itemBuilder: (context, index) {
                  final lecture = lectures[index];

                  return LectureInfoCard(
                    lecture: lecture,
                  );
                },
              ),
            );
          } else {
            return const Center(
              child: CircularProgressIndicator(),
            );
          }
        },
      ),





      ============================

      Consumer<StudentProvider>(
              builder: (context, provider, child) {
                try {
                  print(
                      "=====********************The selected student is ${provider.studentProfile.first}");
                  final currentStudent = provider.studentProfile.first;
                  final currentStudentLectures = currentStudent.lectureIds;
                  print(currentStudentLectures);

                  return Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: ListView.builder(
                      itemCount: 10,
                      itemBuilder: (context, index) {
                        final lecture = lectures[index];

                        return LectureInfoCard(
                          lecture: lecture,
                        );
                      },
                    ),
                  );
                } catch (e) {
                  return Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: Center(
                      child: Text(
                        "No data found possibly due to your network",
                        style: Theme.of(context).textTheme.bodyLarge,
                      ),
                    ),
                  );
                }
              },
            ),